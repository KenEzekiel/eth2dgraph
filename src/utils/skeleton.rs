use ethers::types::Bytes;
use std::cmp::min;

/// Extracts the skeleton of a deployed bytecode.
/// This is useful to compare two bytecode and see if they are functionally the same.
/// The skeleton is a bytecode where all the PUSH opcodes arguments are replaced by 0x00.
/// It's suggested to first remove the metadata from the bytecode before extracting the skeleton.
pub fn extract_skeleton(deployed_bytecode: &[u8]) -> Bytes {
    let mut result = deployed_bytecode.to_vec();
    let mut i = 0;
    while i < result.len() {
        if result[i] >= 0x60 && result[i] <= 0x7f {
            let remaining = result.len() - i - 1;
            let to_push = min((result[i] - 0x5f) as usize, remaining);
            for j in 0..to_push {
                result[i + j + 1] = 0x00;
            }
            i += to_push;
        }
        i += 1;
    }
    Bytes::from(result)
}

#[cfg(test)]
mod tests {
    use crate::utils::{metadata::separate_metadata, skeleton::extract_skeleton};
    use ethers::types::Bytes;
    use std::io::Write;
    use std::{collections::HashMap, str::FromStr};
    use tokio::{
        fs::File,
        io::{AsyncBufReadExt, BufReader},
    };

    #[tokio::test]
    async fn test_extract_skeleton() {
        // credits for test data to: https://github.com/gsalzer/ethutils

        let file = File::open("test-data/bytecodes_skeleton.csv")
            .await
            .unwrap();
        let mut lines = BufReader::new(file).lines();
        let mut skeletons: HashMap<usize, Bytes> = HashMap::new();

        // skip header
        lines.next_line().await.expect("Failed to read file");

        while let Some(line) = lines.next_line().await.expect("Failed to read file") {
            let mut parts = line.split(';');
            let id = parts.next().unwrap();
            let skeleton = parts.next().unwrap();
            let id = id.parse::<usize>().unwrap();
            let skeleton = Bytes::from_str(skeleton).unwrap();
            skeletons.insert(id, skeleton);
        }

        let file = File::open("test-data/bytecodes.csv").await.unwrap();
        let mut lines = BufReader::new(file).lines();

        // skip header
        lines.next_line().await.expect("Failed to read file");

        while let Some(line) = lines.next_line().await.expect("Failed to read file") {
            let mut parts = line.split(';');

            let id = parts.next().unwrap();
            let account = parts.next().unwrap();
            let code = parts.next().unwrap();

            let id = id.parse::<usize>().unwrap();
            let _account = Bytes::from_str(account).unwrap();
            let code = Bytes::from_str(code).unwrap();

            println!("Testing id: {}", id);

            let separated = separate_metadata(&code);

            let code = match separated {
                Some((code, _)) => code,
                None => panic!("Failed to separate metadata"),
            };

            let skeleton = extract_skeleton(code);

            assert_eq!(
                skeleton.to_string(),
                skeletons.get(&id).unwrap().to_string()
            );
        }
    }

    #[tokio::test]
    async fn test_multiple_metadata_separator() {
        let bytecode = Bytes::from_str("608060405234801561001057600080fd5b506004361061007d5760003560e01c80637a675bb61161005b5780637a675bb6146100fe578063893d20e81461011a5780638d06449e14610138578063ccf4c0e0146101685761007d565b806301e33667146100825780633735b3c61461009e5780633aecd0e3146100ce575b600080fd5b61009c600480360381019061009791906107f6565b610184565b005b6100b860048036038101906100b39190610849565b61032c565b6040516100c591906108d5565b60405180910390f35b6100e860048036038101906100e391906108f0565b61035f565b6040516100f5919061092c565b60405180910390f35b61011860048036038101906101139190610849565b6103e7565b005b610122610574565b60405161012f9190610956565b60405180910390f35b610152600480360381019061014d9190610971565b61059e565b60405161015f919061092c565b60405180910390f35b610182600480360381019061017d9190610971565b610654565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101de57600080fd5b60008390508073ffffffffffffffffffffffffffffffffffffffff1663095ea7b330670de0b6b3a76400006040518363ffffffff1660e01b81526004016102269291906109ec565b6020604051808303816000875af1158015610245573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102699190610a4d565b508073ffffffffffffffffffffffffffffffffffffffff166323b872dd3085856040518463ffffffff1660e01b81526004016102a793929190610a7a565b6020604051808303816000875af11580156102c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ea9190610a4d565b507f5c8eba91a611e88d931870555f6d72f42b21168e9c9ad763bd41647d9c5cd8b784848460405161031e93929190610a7a565b60405180910390a150505050565b60006020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000808290508073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161039e9190610956565b602060405180830381865afa1580156103bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103df9190610ac6565b915050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461044157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146104ac57600080fd5b600081306040516104bc9061074f565b6104c7929190610af3565b604051809103906000f0801580156104e3573d6000803e3d6000fd5b5090508060008084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fcd5521b74f61a8765eca4a6d3412849e14cdeb16e73f4b24507efc5a79b367798282604051610568929190610af3565b60405180910390a15050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633aecd0e3836040518263ffffffff1660e01b815260040161060b9190610956565b602060405180830381865afa158015610628573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064c9190610ac6565b905092915050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146106ae57600080fd5b60008083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636978c126826040518263ffffffff1660e01b81526004016107199190610956565b600060405180830381600087803b15801561073357600080fd5b505af1158015610747573d6000803e3d6000fd5b505050505050565b6106108062000b1d83390190565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061078d82610762565b9050919050565b61079d81610782565b81146107a857600080fd5b50565b6000813590506107ba81610794565b92915050565b6000819050919050565b6107d3816107c0565b81146107de57600080fd5b50565b6000813590506107f0816107ca565b92915050565b60008060006060848603121561080f5761080e61075d565b5b600061081d868287016107ab565b935050602061082e868287016107ab565b925050604061083f868287016107e1565b9150509250925092565b60006020828403121561085f5761085e61075d565b5b600061086d848285016107e1565b91505092915050565b6000819050919050565b600061089b61089661089184610762565b610876565b610762565b9050919050565b60006108ad82610880565b9050919050565b60006108bf826108a2565b9050919050565b6108cf816108b4565b82525050565b60006020820190506108ea60008301846108c6565b92915050565b6000602082840312156109065761090561075d565b5b6000610914848285016107ab565b91505092915050565b610926816107c0565b82525050565b6000602082019050610941600083018461091d565b92915050565b61095081610782565b82525050565b600060208201905061096b6000830184610947565b92915050565b600080604083850312156109885761098761075d565b5b6000610996858286016107e1565b92505060206109a7858286016107ab565b9150509250929050565b6000819050919050565b60006109d66109d16109cc846109b1565b610876565b6107c0565b9050919050565b6109e6816109bb565b82525050565b6000604082019050610a016000830185610947565b610a0e60208301846109dd565b9392505050565b60008115159050919050565b610a2a81610a15565b8114610a3557600080fd5b50565b600081519050610a4781610a21565b92915050565b600060208284031215610a6357610a6261075d565b5b6000610a7184828501610a38565b91505092915050565b6000606082019050610a8f6000830186610947565b610a9c6020830185610947565b610aa9604083018461091d565b949350505050565b600081519050610ac0816107ca565b92915050565b600060208284031215610adc57610adb61075d565b5b6000610aea84828501610ab1565b91505092915050565b6000604082019050610b08600083018561091d565b610b156020830184610947565b939250505056fe608060405234801561001057600080fd5b506040516106103803806106108339818101604052810190610032919061011a565b8160008190555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505061015a565b600080fd5b6000819050919050565b61009981610086565b81146100a457600080fd5b50565b6000815190506100b681610090565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100e7826100bc565b9050919050565b6100f7816100dc565b811461010257600080fd5b50565b600081519050610114816100ee565b92915050565b6000806040838503121561013157610130610081565b5b600061013f858286016100a7565b925050602061015085828601610105565b9150509250929050565b6104a7806101696000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80633aecd0e3146100465780636978c12614610076578063ab63d7f214610092575b600080fd5b610060600480360381019061005b91906102ff565b6100b0565b60405161006d9190610345565b60405180910390f35b610090600480360381019061008b91906102ff565b610138565b005b61009a610293565b6040516100a79190610345565b60405180910390f35b6000808290508073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016100ef919061036f565b602060405180830381865afa15801561010c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061013091906103b6565b915050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461019257600080fd5b60008190508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb338373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016101ed919061036f565b602060405180830381865afa15801561020a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022e91906103b6565b6040518363ffffffff1660e01b815260040161024b9291906103e3565b6020604051808303816000875af115801561026a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028e9190610444565b505050565b60008054905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006102cc826102a1565b9050919050565b6102dc816102c1565b81146102e757600080fd5b50565b6000813590506102f9816102d3565b92915050565b6000602082840312156103155761031461029c565b5b6000610323848285016102ea565b91505092915050565b6000819050919050565b61033f8161032c565b82525050565b600060208201905061035a6000830184610336565b92915050565b610369816102c1565b82525050565b60006020820190506103846000830184610360565b92915050565b6103938161032c565b811461039e57600080fd5b50565b6000815190506103b08161038a565b92915050565b6000602082840312156103cc576103cb61029c565b5b60006103da848285016103a1565b91505092915050565b60006040820190506103f86000830185610360565b6104056020830184610336565b9392505050565b60008115159050919050565b6104218161040c565b811461042c57600080fd5b50565b60008151905061043e81610418565b92915050565b60006020828403121561045a5761045961029c565b5b60006104688482850161042f565b9150509291505056fea264697066735822122003dd98116a127f38fd37045b10156b06ec7c00ef0736e7096282214c3d70767164736f6c634300080b0033a264697066735822122096c9835f8fe7a08a611401c745bfd5b514ea9e79c28f08e5dd1caefad6657c6c64736f6c634300080b0033");
        let bytecode = bytecode.unwrap();
        let indexes = separate_metadata(&bytecode);
        assert!(indexes.is_some());
        let indexes = indexes.unwrap();
        assert_eq!(indexes.0.len(), 8688 / 2);
        assert_eq!(indexes.1.len(), 8900 / 2 - 8988 / 2);
    }

    #[tokio::test]
    async fn test_specific_bytecode() {
        let bytecode = Bytes::from_str("608060405234801561001057600080fd5b50600436106100625760003560e01c806306fdde0314610067578063099219391461008557806318160ddd146100b5578063313ce567146100d357806370a08231146100f157806395d89b4114610121575b600080fd5b61006f61013f565b60405161007c91906104bb565b60405180910390f35b61009f600480360381019061009a9190610576565b6101cd565b6040516100ac91906105d1565b60405180910390f35b6100bd61036c565b6040516100ca91906105fb565b60405180910390f35b6100db610372565b6040516100e89190610632565b60405180910390f35b61010b6004803603810190610106919061064d565b610385565b60405161011891906105fb565b60405180910390f35b61012961039d565b60405161013691906104bb565b60405180910390f35b6000805461014c906106a9565b80601f0160208091040260200160405190810160405280929190818152602001828054610178906106a9565b80156101c55780601f1061019a576101008083540402835291602001916101c5565b820191906000526020600020905b8154815290600101906020018083116101a857829003601f168201915b505050505081565b600081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610251576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024890610726565b60405180910390fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102a09190610775565b9250508190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102f691906107a9565b925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161035a91906105fb565b60405180910390a36001905092915050565b60035481565b600260009054906101000a900460ff1681565b60046020528060005260406000206000915090505481565b600180546103aa906106a9565b80601f01602080910402602001604051908101604052809291908181526020018280546103d6906106a9565b80156104235780601f106103f857610100808354040283529160200191610423565b820191906000526020600020905b81548152906001019060200180831161040657829003601f168201915b505050505081565b600081519050919050565b600082825260208201905092915050565b60005b8381101561046557808201518184015260208101905061044a565b60008484015250505050565b6000601f19601f8301169050919050565b600061048d8261042b565b6104978185610436565b93506104a7818560208601610447565b6104b081610471565b840191505092915050565b600060208201905081810360008301526104d58184610482565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061050d826104e2565b9050919050565b61051d81610502565b811461052857600080fd5b50565b60008135905061053a81610514565b92915050565b6000819050919050565b61055381610540565b811461055e57600080fd5b50565b6000813590506105708161054a565b92915050565b6000806040838503121561058d5761058c6104dd565b5b600061059b8582860161052b565b92505060206105ac85828601610561565b9150509250929050565b60008115159050919050565b6105cb816105b6565b82525050565b60006020820190506105e660008301846105c2565b92915050565b6105f581610540565b82525050565b600060208201905061061060008301846105ec565b92915050565b600060ff82169050919050565b61062c81610616565b82525050565b60006020820190506106476000830184610623565b92915050565b600060208284031215610663576106626104dd565b5b60006106718482850161052b565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806106c157607f821691505b6020821081036106d4576106d361067a565b5b50919050565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b6000610710601483610436565b915061071b826106da565b602082019050919050565b6000602082019050818103600083015261073f81610703565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061078082610540565b915061078b83610540565b92508282039050818111156107a3576107a2610746565b5b92915050565b60006107b482610540565b91506107bf83610540565b92508282019050808211156107d7576107d6610746565b5b9291505056");
        let bytecode = bytecode.unwrap();
        let indexes = separate_metadata(&bytecode);
        let runtime = match indexes {
            Some((code, _)) => code,
            None => &bytecode,
        };
        let skeleton = extract_skeleton(&runtime);
        println!("runtime: {:?}", runtime);
        println!("skeleton: {:?}", skeleton);
        let bytecode = Bytes::from_str("608060405234801561001057600080fd5b50600436106100625760003560e01c806306fdde031461006757806318160ddd14610085578063313ce567146100a357806370a08231146100c157806395d89b41146100f1578063a010dc7c1461010f575b600080fd5b61006f61013f565b60405161007c91906104bb565b60405180910390f35b61008d6101cd565b60405161009a91906104f6565b60405180910390f35b6100ab6101d3565b6040516100b8919061052d565b60405180910390f35b6100db60048036038101906100d691906105ab565b6101e6565b6040516100e891906104f6565b60405180910390f35b6100f96101fe565b60405161010691906104bb565b60405180910390f35b61012960048036038101906101249190610604565b61028c565b604051610136919061065f565b60405180910390f35b6000805461014c906106a9565b80601f0160208091040260200160405190810160405280929190818152602001828054610178906106a9565b80156101c55780601f1061019a576101008083540402835291602001916101c5565b820191906000526020600020905b8154815290600101906020018083116101a857829003601f168201915b505050505081565b60035481565b600260009054906101000a900460ff1681565b60046020528060005260406000206000915090505481565b6001805461020b906106a9565b80601f0160208091040260200160405190810160405280929190818152602001828054610237906106a9565b80156102845780601f1061025957610100808354040283529160200191610284565b820191906000526020600020905b81548152906001019060200180831161026757829003601f168201915b505050505081565b600081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610310576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030790610726565b60405180910390fd5b81600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461035f9190610775565b9250508190555081600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103b591906107a9565b925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161041991906104f6565b60405180910390a36001905092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561046557808201518184015260208101905061044a565b60008484015250505050565b6000601f19601f8301169050919050565b600061048d8261042b565b6104978185610436565b93506104a7818560208601610447565b6104b081610471565b840191505092915050565b600060208201905081810360008301526104d58184610482565b905092915050565b6000819050919050565b6104f0816104dd565b82525050565b600060208201905061050b60008301846104e7565b92915050565b600060ff82169050919050565b61052781610511565b82525050565b6000602082019050610542600083018461051e565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105788261054d565b9050919050565b6105888161056d565b811461059357600080fd5b50565b6000813590506105a58161057f565b92915050565b6000602082840312156105c1576105c0610548565b5b60006105cf84828501610596565b91505092915050565b6105e1816104dd565b81146105ec57600080fd5b50565b6000813590506105fe816105d8565b92915050565b6000806040838503121561061b5761061a610548565b5b600061062985828601610596565b925050602061063a858286016105ef565b9150509250929050565b60008115159050919050565b61065981610644565b82525050565b60006020820190506106746000830184610650565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806106c157607f821691505b6020821081036106d4576106d361067a565b5b50919050565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b6000610710601483610436565b915061071b826106da565b602082019050919050565b6000602082019050818103600083015261073f81610703565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610780826104dd565b915061078b836104dd565b92508282039050818111156107a3576107a2610746565b5b92915050565b60006107b4826104dd565b91506107bf836104dd565b92508282019050808211156107d7576107d6610746565b5b9291505056");
        let bytecode = bytecode.unwrap();
        let indexes = separate_metadata(&bytecode);
        let runtime = match indexes {
            Some((code, _)) => code,
            None => &bytecode,
        };
        let skeleton = extract_skeleton(&runtime);
        println!("runtime: {:?}", runtime);
        println!("skeleton: {:?}", skeleton);
    }

    #[tokio::test]
    async fn meta_skeletons() {
        let file = File::open("test-data/to_skeletize.txt").await.unwrap();
        let mut lines = BufReader::new(file).lines();
        let mut output = std::fs::File::create("test-data/skeletons.txt").unwrap();

        while let Some(line) = lines.next_line().await.expect("Failed to read file") {
            let code = Bytes::from_str(&line).unwrap();
            let runtime_code = separate_metadata(&code);
            let runtime_code = match runtime_code {
                Some((code, _)) => code,
                None => &code,
            };
            let skeleton = extract_skeleton(&runtime_code);
            // write to file
            writeln!(output, "{}", skeleton).unwrap();
        }
    }
}
